name: Lint, Format, Test, Build, and Scan Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Poetry virtual environment
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
        working-directory: ./fastapi-docker-app

      - name: Format code
        continue-on-error: true
        run: |
          poetry run ruff . --fix
        working-directory: ./fastapi-docker-app

      - name: Lint code
        continue-on-error: true
        run: |
          poetry run ruff .
        working-directory: ./fastapi-docker-app

      - name: Run tests
        run: |
          poetry run pytest --cov=app --cov-report=xml --cov-report=term-missing
        working-directory: ./fastapi-docker-app

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./fastapi-docker-app/coverage.xml

  build-and-scan:
    needs: setup-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag my-image:latest
        working-directory: ./fastapi-docker-app

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'my-image:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy:
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: .

      - name: Display coverage report
        run: cat coverage.xml
        working-directory: ./fastapi-docker-app

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: 'my-image:latest'
          push: true
          loaders: type=docker,dest=/tmp/my-image.tar
