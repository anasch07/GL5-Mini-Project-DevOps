name: Lint, Format, Test, Build, and Scan Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install poetry
          cd fastapi-docker-app
          poetry install

      - name: Format code with ruff
        continue-on-error: true  # Run without failing the job
        run: |
          cd fastapi-docker-app
          poetry run ruff . --fix

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install poetry
          cd fastapi-docker-app
          poetry install

      - name: Lint code with ruff
        continue-on-error: true  # Run without failing the job
        run: |
          cd fastapi-docker-app
          poetry run ruff .

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install poetry
          cd fastapi-docker-app
          poetry install

      - name: Run tests
        run: |
          cd fastapi-docker-app
          poetry run pytest

  build:
    needs: [format, lint, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi-docker-app
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/gl5-mini-project-devops:latest
          push: false  # Only build, do not push

  trivy-scan:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/gl5-mini-project-devops:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  push:
    needs: sonarQube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./fastapi-docker-app
          push: true  # Push the image to DockerHub
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/gl5-mini-project-devops:latest
  sonarQube:
    needs:
      - trivy-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
